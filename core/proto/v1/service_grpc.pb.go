// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreService_GetActivityByOrderID_FullMethodName = "/proto.core.v1.CoreService/GetActivityByOrderID"
	CoreService_DownloadGPX_FullMethodName          = "/proto.core.v1.CoreService/DownloadGPX"
	CoreService_CreateActivity_FullMethodName       = "/proto.core.v1.CoreService/CreateActivity"
	CoreService_DeleteActivity_FullMethodName       = "/proto.core.v1.CoreService/DeleteActivity"
	CoreService_ListActivity_FullMethodName         = "/proto.core.v1.CoreService/ListActivity"
	CoreService_GetActivity_FullMethodName          = "/proto.core.v1.CoreService/GetActivity"
)

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	GetActivityByOrderID(ctx context.Context, in *GetActivityByOrderIDRequest, opts ...grpc.CallOption) (*GetActivityByOrderIDResponse, error)
	DownloadGPX(ctx context.Context, in *DownloadGPXRequest, opts ...grpc.CallOption) (*DownloadGPXResponse, error)
	CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListActivity(ctx context.Context, in *ListActivityRequest, opts ...grpc.CallOption) (*ListActivityResponse, error)
	GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) GetActivityByOrderID(ctx context.Context, in *GetActivityByOrderIDRequest, opts ...grpc.CallOption) (*GetActivityByOrderIDResponse, error) {
	out := new(GetActivityByOrderIDResponse)
	err := c.cc.Invoke(ctx, CoreService_GetActivityByOrderID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DownloadGPX(ctx context.Context, in *DownloadGPXRequest, opts ...grpc.CallOption) (*DownloadGPXResponse, error) {
	out := new(DownloadGPXResponse)
	err := c.cc.Invoke(ctx, CoreService_DownloadGPX_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, CoreService_CreateActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CoreService_DeleteActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListActivity(ctx context.Context, in *ListActivityRequest, opts ...grpc.CallOption) (*ListActivityResponse, error) {
	out := new(ListActivityResponse)
	err := c.cc.Invoke(ctx, CoreService_ListActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, CoreService_GetActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations should embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	GetActivityByOrderID(context.Context, *GetActivityByOrderIDRequest) (*GetActivityByOrderIDResponse, error)
	DownloadGPX(context.Context, *DownloadGPXRequest) (*DownloadGPXResponse, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*Activity, error)
	DeleteActivity(context.Context, *DeleteActivityRequest) (*emptypb.Empty, error)
	ListActivity(context.Context, *ListActivityRequest) (*ListActivityResponse, error)
	GetActivity(context.Context, *GetActivityRequest) (*Activity, error)
}

// UnimplementedCoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) GetActivityByOrderID(context.Context, *GetActivityByOrderIDRequest) (*GetActivityByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityByOrderID not implemented")
}
func (UnimplementedCoreServiceServer) DownloadGPX(context.Context, *DownloadGPXRequest) (*DownloadGPXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGPX not implemented")
}
func (UnimplementedCoreServiceServer) CreateActivity(context.Context, *CreateActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedCoreServiceServer) DeleteActivity(context.Context, *DeleteActivityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivity not implemented")
}
func (UnimplementedCoreServiceServer) ListActivity(context.Context, *ListActivityRequest) (*ListActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivity not implemented")
}
func (UnimplementedCoreServiceServer) GetActivity(context.Context, *GetActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_GetActivityByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetActivityByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetActivityByOrderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetActivityByOrderID(ctx, req.(*GetActivityByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DownloadGPX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGPXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DownloadGPX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_DownloadGPX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DownloadGPX(ctx, req.(*DownloadGPXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_CreateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).CreateActivity(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_DeleteActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteActivity(ctx, req.(*DeleteActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_ListActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListActivity(ctx, req.(*ListActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetActivity(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.core.v1.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivityByOrderID",
			Handler:    _CoreService_GetActivityByOrderID_Handler,
		},
		{
			MethodName: "DownloadGPX",
			Handler:    _CoreService_DownloadGPX_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _CoreService_CreateActivity_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _CoreService_DeleteActivity_Handler,
		},
		{
			MethodName: "ListActivity",
			Handler:    _CoreService_ListActivity_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _CoreService_GetActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/service.proto",
}
